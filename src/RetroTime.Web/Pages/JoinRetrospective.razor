@page "/retrospective/{retroId}/join"
@implements RetroTime.Application.Notifications.RetrospectiveJoined.IRetrospectiveJoinedSubscriber
@inherits SubscribingComponent<RetroTime.Application.Notifications.RetrospectiveJoined.IRetrospectiveJoinedSubscriber>
@layout RetrospectiveLayout
@inject ILogger<JoinRetrospective> Logger
@inject NavigationManager NavigationManager;
@using Microsoft.Extensions.Logging
@using RetroTime.Application.Notifications
@using RetroTime.Application.PredefinedParticipantColors.Queries.GetAvailablePredefinedParticipantColors
@using RetroTime.Application.Retrospectives.Commands.JoinRetrospective
@using RetroTime.Application.Retrospectives.Queries.GetJoinRetrospectiveInfo
@using RetroTime.Application.Retrospectives.Queries.GetParticipant
@using RetroTime.Application.Retrospectives.Queries.GetParticipantsInfo
@using RetroTime.Web.Components.Layout

@if (RetrospectiveInfo == null)
{
    <section class="alert alert-danger" role="alert">
        <h4 class="alert-heading">Session not found</h4>
        <p>
            Sorry, I can't find that retrospective. Please check if the URL is correct.
        </p>
    </section>
}
else
{
    <h1>Join retrospective: @RetrospectiveInfo.Title</h1>
    <p class="lead">A safe space to reflect on the past sprint</p>

    <div class="row">
        <div class="col">
            <p class="lead">
                Join the retrospective "@RetrospectiveInfo.Title" by filling in the necessary information on the form below.
            </p>

            @if (RetrospectiveInfo.IsFinished)
            {
                <Notification Type="Notification.NotificationType.Warning">
                    This retrospective has already finished. You can log in and view the past results but you won't be able to participate anymore.
                </Notification>
            }
            else if (RetrospectiveInfo.IsStarted)
            {
                <Notification Type="Notification.NotificationType.Info">
                    This retrospective has already started. Hurry up!
                </Notification>
            }

            @if (ShowErrorMessage)
            {
                <ErrorMessage Text="Something went wrong joining the retrospective. Please try again."/>
            }

            <EditForm Model="@Model" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
                <Blazored.FluentValidation.FluentValidationValidator/>

                <div class="mt-3">
                    <label class="form-label" for="retro-name">Your name</label>
                    <InputText id="retro-name"
                               class="form-control"
                               type="text"
                               @bind-Value="@Model.Name"
                               @onblur="@OnParticipantNameChanged"
                               placeholder="Enter your name, so we know who you are"/>

                    <ValidationMessage For="() => Model.Name"></ValidationMessage>
                    @if (ShowParticipantAlreadyJoinedWarning)
                    {
                        <p class="text-muted small">@Model.Name has already joined the retrospective. If this was not you, please choose a different name.</p>
                    }
                </div>

                @if (UseOwnColor || AvailablePredefinedColors.Count == 0)
                {
                    <div class="mt-3">
                        <label class="form-label" for="retro-color">Your custom color</label>
                        <div class="input-group">
                            <InputText id="retro-color" type="color" class="form-control input--retro-color" @bind-Value="@Model.Color" disabled="@(this.ShowParticipantAlreadyJoinedWarning ? "disabled" : null)"/>
                        </div>
                        <ValidationMessage For="() => Model.Color"></ValidationMessage>
                    </div>
                }
                else
                {
                    <div class="mt-3">
                        <label class="form-label">Your color</label>
                        <div class="input-group">
                            <InputSelect @bind-Value="@Model.Color" id="retro-color-choices" class="form-control">
                                <option value="">Select an option</option>
                                @foreach (AvailableParticipantColorModel color in this.AvailablePredefinedColors)
                                {
                                    <option style="color: #@color.HexString" value="#@color.HexString">@color.Name</option>
                                }
                            </InputSelect>
                            <button type="button" class="btn btn-primary" @onclick="@ChooseOwnColor">
                                Custom color
                            </button>
                        </div>
                        <ValidationMessage For="() => Model.Color"></ValidationMessage>
                    </div>
                }

                <div class="mt-3">
                    <div class="form-check">
                        <InputCheckbox class="form-check-input" @bind-Value="@Model.JoiningAsFacilitator" id="retro-is-facilitator" disabled="@(ShowParticipantAlreadyJoinedWarning ? "disabled" : null)"/>
                        <label class="form-check-label" for="retro-is-facilitator">
                            I'm the facilitator of this retrospective
                        </label>
                    </div>
                </div>

                @if (Model.JoiningAsFacilitator)
                {
                    <div class="mt-3">
                        <label class="form-label" for="retro-facilitator-passphrase">Facilitator passphrase</label>
                        <InputText id="retro-facilitator-passphrase" class="form-control" type="text" @bind-Value="@Model.Passphrase" placeholder=""/>

                        <ValidationMessage For="() => Model.Passphrase"></ValidationMessage>
                        <p class="text-muted small">You should have set this password yourself. If you've lost it, create a new retrospective instead.</p>
                    </div>
                }
                else if (RetrospectiveInfo.NeedsParticipantPassphrase)
                {
                    <div class="mt-3">
                        <label class="form-label" for="retro-passphrase">Passphrase</label>
                        <InputText id="retro-passphrase" class="form-control" type="text" @bind-Value="@Model.Passphrase" placeholder=""/>
                        <ValidationMessage For="() => Model.Passphrase"></ValidationMessage>
                        <p class="text-muted small">You should have got this in the invitation.</p>
                    </div>
                }

                <div class="mt-3">
                    <button class="btn btn-primary" id="join-retro-button">
                        <span>Continue</span>
                    </button>
                </div>
            </EditForm>
        </div>

        <div class="col-3">
            <RetrospectiveOnlineList RetroId="@RetroId"/>
        </div>
    </div>
}


@code
{
#nullable disable
    [Parameter]
    public string RetroId { get; set; }

    private JoinRetrospectiveInfo RetrospectiveInfo { get; set; }
    private IList<AvailableParticipantColorModel> AvailablePredefinedColors { get; set; }
    private bool ShowErrorMessage { get; set; }
    private bool ShowParticipantAlreadyJoinedWarning { get; set; }

    [Parameter]
    public JoinRetrospectiveCommand Model { get; set; } = new JoinRetrospectiveCommand();

    [Parameter]
    public bool UseOwnColor { get; set; }

    [CascadingParameter]
    public IRetrospectiveLayout Layout { get; set; }

    protected override async Task OnInitializedAsync()
    {
        RetrospectiveInfo = await Mediator.Send(new GetJoinRetrospectiveInfoQuery {RetroId = RetroId});

        if (RetrospectiveInfo != null)
        {
            Layout?.Update(new RetrospectiveLayoutInfo(RetrospectiveInfo.Title));
            AvailablePredefinedColors = await Mediator.Send(new GetAvailablePredefinedParticipantColorsQuery(RetroId));
        }
        else
        {
            Layout?.Update(new RetrospectiveLayoutInfo("Not found"));
        }
    }

    protected override void OnParametersSet()
    {
        Model.RetroId = RetroId;
    }

    private void ChooseOwnColor()
    {
        UseOwnColor = true;
    }

    private async Task OnParticipantNameChanged()
    {
        if (String.IsNullOrEmpty(Model.Name))
        {
            return;
        }

        bool wasShowingParticipantWarning = ShowParticipantAlreadyJoinedWarning;

        ParticipantInfo result = await Mediator.Send(new GetParticipantQuery(Model.Name, RetroId));
        ShowParticipantAlreadyJoinedWarning = result != null;

        if (result != null)
        {
    // Disable controls as the choice has already been made
            Model.JoiningAsFacilitator = result.IsFacilitator;
            UseOwnColor = AvailablePredefinedColors.Any(x => x.HasSameColors(result.Color)) == false;
            Model.Color = "#" + result.Color.HexString;
        }
        else if (wasShowingParticipantWarning)
        {
    // Reset form to use normal controls
            UseOwnColor = false;
            Model.Color = null;
            Model.JoiningAsFacilitator = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        ShowErrorMessage = false;

        try
        {
            Model.Color = Model.Color?.TrimStart('#');
            Model.Color = Model.Color?.Length != 6 ? "CCCCCC" : Model.Color;

            await Mediator.Send(Model);
        }
        catch (Exception ex)
        {
            ShowErrorMessage = true;

            Logger.LogError(ex, $"Error joining retrospective {RetroId} with name {Model.Name}");
            return;
        }

        NavigationManager.NavigateTo("retrospective/" + RetroId + "/lobby");
    }

    private void HandleInvalidSubmit()
    {
        ShowErrorMessage = false;
    }

    public Task OnParticipantJoinedRetrospective(RetrospectiveEvent<ParticipantInfo> eventArgs)
    {
        if (eventArgs.RetroId != RetroId)
        {
            return Task.CompletedTask;
        }

        return InvokeAsync(async () =>
        {
            AvailablePredefinedColors = await Mediator.Send(new GetAvailablePredefinedParticipantColorsQuery(RetroId));

            NotificationIsHandled();
        });
    }
}
@page "/create-retro-session"
@inherits MediatorComponent
@using Microsoft.Extensions.Logging
@using Microsoft.Extensions.Options
@using Net.Codecrete.QrCodeGenerator
@using RetroTime.Application.Common.Settings
@using RetroTime.Application.Retrospectives.Commands.CreateRetrospective
@using RetroTime.Web.Services
@inject ILogger<CreateRetrospective> Logger
@inject IOptions<SecuritySettings> SecuritySettingsAccessor
@inject IJSRuntime JSRuntime
@inject ClipboardService ClipboardService

@if (ShowCompletionMessage)
{
    <section class="alert alert-success" role="alert">
        <h4 class="alert-heading">
            Success
        </h4>
        <p>
            Your retrospective lobby has been created.
        </p>
    </section>

    if (Result != null)
    {
        <p class="form-label">
            Please share the following URL and QR code with your team.
        </p>

        <div class="input-group mb-3">
            <input class="form-control" id="retro-location" type="text" readonly="readonly" value="@Result.Location">
            <button class="input-group-text" id="copy-link" @onclick="CopyToClipboard">
                <i class="fas fa-copy"></i>
            </button>
            <button class="input-group-text" id="open-link" @onclick="NavigateInNewTab">
                <i class="fas fa-link"></i>
            </button>
        </div>

        <div class="mt-3">
            <p>
                <img src="@Result.QrCode.ToBase64(4, 0)" class="retro-qrcode" alt=""/>
            </p>
        </div>

        if (!String.IsNullOrEmpty(Model.Passphrase))
        {
            <p data-test-element-id="participator-instructions">
                To enter the retrospective, the participants need to enter the following password: <code >@Model.Passphrase</code>.
            </p>
        }
        else
        {
            <p data-test-element-id="participator-instructions">
                To enter the retrospective no password is required.
            </p>
        }

        <p data-test-element-id="facilitator-instructions">
            To start the retrospective, you need to enter the following password: <code>@Model.FacilitatorPassphrase</code>.
        </p>

        <p>
            Have a good retrospective!
        </p>
    }
}
else
{
    <h1>Create a retrospective</h1>
    <p>A safe space to reflect on the past sprint</p>

    <p class="lead">
        Create a retrospective with the form below. After completion you will receive a url to share with your team members.
    </p>

    if (ShowErrorMessage)
    {
        <ErrorMessage Text="Something went wrong creating the retrospective. Please try again."/>
    }

    <EditForm Model="@Model" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
        <Blazored.FluentValidation.FluentValidationValidator/>

        <div class="mb-3">
            <label class="form-label" for="retrotime-title">Title</label>
            <div class="control">
                <InputText id="retrotime-title" class="form-control" type="text" @bind-Value="@Model.Title" placeholder="Give the retrospective a title"/>
            </div>

            <ValidationMessage For="() => Model.Title"></ValidationMessage>
        </div>

        <div class="mb-3">
            <label class="form-label" for="retro-facilitator-passphrase">Facilitator passphrase</label>
            <div class="control">
                <InputText id="retro-facilitator-passphrase" class="form-control" type="text" @bind-Value="@Model.FacilitatorPassphrase" placeholder=""/>
            </div>

            <ValidationMessage For="() => Model.FacilitatorPassphrase"></ValidationMessage>
            <p class="text-muted small">This is the password you need to start and control the progress of the retrospective.</p>
        </div>
        <div class="mb-3">
            <label class="form-label" for="retro-passphrase">Participant passphrase</label>
            <div class="control">
                <InputText id="retro-passphrase" class="form-control" type="text" @bind-Value="@Model.Passphrase" placeholder=""/>
            </div>
            <ValidationMessage For="() => Model.Passphrase"></ValidationMessage>
            <p class="text-muted small">Optional passphrase required for participants to enter the lobby.</p>
        </div>

        @if (SecuritySettingsAccessor.Value.LobbyCreationNeedsPassphrase)
        {
            <Modal IsShown="@ShowPasswordModal">
                <div class="box" data-test-element-id="lobby-creation-passphrase-modal">
                    <div class="field">
                        <label class="form-label" for="retro-lobby-creation-passphrase">Pre-shared retrospective creation passphrase</label>
                        <div class="control">
                            <InputText id="retro-lobby-creation-passphrase" class="form-control" type="password" @bind-Value="@Model.LobbyCreationPassphrase"/>
                        </div>

                        <ValidationMessage For="() => Model.LobbyCreationPassphrase"></ValidationMessage>
                    </div>

                    <button class="btn btn-primary" id="modal-create-retro-button">Submit</button>
                </div>
            </Modal>
        }

        <div class="field is-grouped">
            <div class="control">
                @if (SecuritySettingsAccessor.Value.LobbyCreationNeedsPassphrase)
                {
                    <button class="btn btn-primary" id="create-retro-button" type="button" @onclick="@HandleProtectedFormSubmit">Submit</button>
                }
                else
                {
                    <button class="btn btn-primary" id="create-retro-button">Submit</button>
                }
            </div>
        </div>
    </EditForm>
}

@code {

#nullable disable

    Task HandleInvalidSubmit(EditContext editContext)
    {
        ShowErrorMessage = false;

        bool hasLobbyCreationPassphraseError = editContext.GetValidationMessages(() => Model.LobbyCreationPassphrase).Any();
        ShowPasswordModal = hasLobbyCreationPassphraseError;

        return Task.CompletedTask;
    }

    void HandleProtectedFormSubmit()
    {
        ShowPasswordModal = true;
    }

    async Task HandleValidSubmit()
    {
        ShowPasswordModal = false;
        ShowErrorMessage = false;

        try
        {
            CreateRetrospectiveCommandResponse response = await Mediator.Send(Model);

            Result = response;
            ShowCompletionMessage = true;
        }
        catch (Exception ex)
        {
            ShowErrorMessage = true;

            Logger.LogError(ex, "Error creating retrospective");
        }
    }

    public CreateRetrospectiveCommandResponse Result { get; set; }

    public bool ShowCompletionMessage;
    public bool ShowErrorMessage;
    public bool ShowPasswordModal;

    [Parameter]
    public CreateRetrospectiveCommand Model { get; set; } = new CreateRetrospectiveCommand();

    private async void CopyToClipboard() => await ClipboardService.WriteTextAsync(Result.Location);

    private async void NavigateInNewTab() =>
        await JSRuntime.InvokeVoidAsync("open", Result.Location, "_blank");

}
@inherits MediatorComponent
@using RetroTime.Application.Common.Models
@using RetroTime.Application.Retrospectives.Queries.GetRetrospectiveStatus
@using RetroTime.Application.RetrospectiveWorkflows.Commands
@using RetroTime.Application.Votes.Queries
<RetrospectiveRolePanel>
    <Facilitator>
        <VoteStatusPanel />

        <WorkflowStatusTimer />

        <p>
            Votes are now being cast, a maximum of @RetrospectiveStatus.VotesPerLane votes per lane per participant.
        </p>

        <h3 class="retrospective-status-panel__next-step-title">Next step</h3>
        <p>
            You can end the voting session with the button below. After ending the retrospective you can review the results.
        </p>

        <p class="has-text-centered">
            <button class="button is-danger" type="button" @onclick="@Continue" data-test-element-id="workflow-continue-button">
                <span class="fas fa-stop"></span> &nbsp;
                End the retrospective
            </button>
        </p>
    </Facilitator>
    <Participant>
        <p>
            Please cast your votes now. You can vote @RetrospectiveStatus.VotesPerLane times per lane.
        </p>

        <VoteStatusPanel />

        <WorkflowStatusTimer />
    </Participant>
</RetrospectiveRolePanel>

@code {
#nullable disable

    [CascadingParameter]
    public RetrospectiveStatus RetrospectiveStatus { get; set; }

    private Task Continue() {
        if (RetrospectiveStatus == null) {
            return Task.CompletedTask;  // Shouldn't happen, but ignore
        }

        return Mediator.Send(new InitiateFinishStageCommand {
            RetroId = RetrospectiveStatus.RetroId
        });
    }


}

@using RetroTime.Application.Common.Models
@inherits NoteGroupBase

<VoteList NoteGroup="@Data"/>

<div class="note-group dropzone @Classes"
     data-id="@Data.Id"
     data-test-element-id="note-group"
     @onclick="@ToggleExpand"
     ondragover="event.preventDefault();"
     @ondrop="@HandleDrop"
     @ondragenter="@HandleDragEnter"
     @ondragleave="@HandleDragLeave">
    @if (CanEdit)
    {
        <div class="field has-addons" style="width: 100%">
            <div class="control is-expanded">
                <input class="input note-group__title-input has-text-centered @(ShowError ? "is-danger" : (ShowWarning ? "is-warning" : null))"
                       type="text"
                       placeholder="Group name"
                       @bind="@DataTitle" />
            </div>
            <div class="control">
                <button class="button is-danger is-outlined" @onclick="@DeleteNoteGroup">
                    <i class="fas fa-trash is-danger"></i>
                </button>
            </div>
        </div>

    }
    else
    {
        <h4 class="is-size-5 note-group__title @(String.IsNullOrEmpty(Data.Title) ? "note-group__title--not-set" : "")">@(String.IsNullOrEmpty(Data.Title) ? "Group name" : Data.Title)</h4>
    }

    <div class="note-group-item-list">
        @foreach (RetrospectiveNote note in Data.Notes)
        {
            <div class="note-group__item" @key="note.Id">
                <Revealable>
                    <Note Data="@note" />
                </Revealable>
            </div>
        }
    </div>

    @if (Data.Notes.Count == 0)
    {
        <div class="box">
            <p>
                This group is empty.
                @if (CanEdit)
                {
                    <text>Drag-and-drop notes here to add them to this group!</text>
                }
            </p>
        </div>
    }
</div>

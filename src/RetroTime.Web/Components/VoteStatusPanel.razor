@using RetroTime.Application.Common.Models
@using RetroTime.Application.Votes.Queries

<div class="vote-status-panel">
    <h3 class="title vote-status-panel__title">Vote status</h3>

    <p class="vote-status-panel__personal-vote-status">
        You have @VotesLeft votes left.
    </p>

    <ul class="vote-status-panel__list">
        @foreach (int participantId in Votes.VotesByParticipant.Keys)
        {
            List<VoteModel> participantVotes = Votes.VotesByParticipant.Get(participantId);
            VoteModel participantVote = participantVotes[0];
            bool isDone = participantVotes.All(v => v.IsCast);
            string faClass = isDone ? "fas" : "far";

            <li data-test-element-id="participant-vote-status" class="vote-status-panel__list-item" data-id="@participantId">
                <span style="color: #@participantVote.ParticipantColor.HexString"
                      class="@faClass fa-user-circle"
                      title="@participantVote.ParticipantName"></span>
                @foreach (VoteModel vote in participantVotes)
                {
                    <Vote Color="@vote.ParticipantColor" IsCast="@vote.IsCast" />
                }
            </li>
        }
    </ul>
</div>

@code {
    #nullable disable

    [CascadingParameter]
    public RetrospectiveVoteStatus Votes { get; set; }

    [CascadingParameter]
    public CurrentParticipantModel CurrentParticipant { get; set; }

    private int VotesLeft
    {
        get
        {
            List<VoteModel> votesForParticipant = Votes.VotesByParticipant.Get(CurrentParticipant.Id);
            return votesForParticipant.Count(x => x.IsCast == false);
        }
    }
}

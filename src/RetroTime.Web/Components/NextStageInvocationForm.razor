@using Microsoft.Extensions.Logging
@using RetroTime.Application.RetrospectiveWorkflows.Commands
@using RetroTime.Domain.ValueObjects
@* ReSharper disable once CSharpWarnings::CS0693 *@
@typeparam TModel
@inject ILogger<NextStageInvocationForm<TModel>> Logger

@* Fix up when blazor supports type param constraints: https://github.com/aspnet/AspNetCore/issues/8433 *@
@if (ShowErrorMessage)
{
    <ErrorMessage Text="Something went wrong executing your command. Please try again." />
}

<EditForm Model="@Model" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
    <Blazored.FluentValidation.FluentValidationValidator />

    @ChildContent

    <div class="mt-3">
        <label class="form-label">@TimeLabelText</label>
        <div class="input-group mb-3">
            <InputNumber class="form-control" min="1" max="30" data-test-element-id="time-in-minutes-input" @bind-Value="@Model.TimeInMinutes" style="width: 8em" />
            <span class="input-group-text">
                <i class="fas fa-stopwatch"></i>
            </span>
        </div>
        <ValidationMessage For="() => Model.TimeInMinutes" />
    </div>

    <div class="mt-3">
        <button type="submit" class="btn btn-primary btn-lg" data-test-element-id="workflow-continue-button">@ButtonText</button>
    </div>
</EditForm>

@code {
#nullable disable

    [Parameter]
    public string ButtonText { get; set; }

    [Parameter]
    public string TimeLabelText { get; set; }

    [Parameter]
    public AbstractTimedStageCommand Model { get; set; }

    [CascadingParameter]
    public RetroIdentifier RetroId { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback<TModel> OnContinue { get; set; }

    private bool ShowErrorMessage { get; set; }

    protected override void OnParametersSet()
    {
        if (RetroId != null && Model != null)
        {
            Model.RetroId = RetroId.StringId;
        }

        base.OnParametersSet();
    }

    private void HandleInvalidSubmit()
    {
        ShowErrorMessage = false;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await OnContinue.InvokeAsync((TModel)(object)Model);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Unable to start the next stage of retrospective {RetroId} from form: {ButtonText}");
            ShowErrorMessage = true;
        }
    }
}
